buildscript {
    repositories {
        maven { url 'https://repository.apache.org/content/repositories/snapshots/' }
        maven { url 'http://repo.maven.apache.org/maven2' }
    }
    dependencies {
        classpath('org.springframework.boot:spring-boot-gradle-plugin:1.3.1.RELEASE')
    }
}

apply plugin: 'java'
apply plugin: 'scala'
apply plugin: 'maven'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'spring-boot'

group = 'org.opencorrelate.exercise.jvm.scala'
version = '0.0.1-SNAPSHOT'

description = 'Processing JSON Exercise'

sourceCompatibility = 1.8
targetCompatibility = 1.8

sourceSets.main.scala.srcDirs = ['src/main/scala']
sourceSets.test.scala.srcDirs = ['src/test/scala']
sourceSets.main.java.srcDirs = []
sourceSets.test.java.srcDirs = []


repositories {
        
     maven { url 'https://repository.apache.org/content/repositories/snapshots/' }
     maven { url 'http://repo.maven.apache.org/maven2' }
}

dependencies {

    // Scala
    compile(group: 'org.scala-lang', name:'scala-library', version: '2.11.7')
    compile(group: 'org.scalameta', name:'quasiquotes_2.11', version:'0.0.4')

    // Flink
    compile(group: 'org.apache.flink', name: 'flink-scala_2.11', version:'1.0-SNAPSHOT') {
        exclude(module: 'slf4j-log4j12')
        exclude(module: 'scala-reflect')
        exclude(module: 'quasiquotes')
    }
    compile(group: 'org.apache.flink', name: 'flink-streaming-scala_2.11', version:'1.0-SNAPSHOT') {
        exclude module: 'slf4j-log4j12'
    }
    compile(group: 'org.apache.flink', name: 'flink-clients_2.11', version:'1.0-SNAPSHOT') {
        exclude module: 'slf4j-log4j12'
    }
    compile(group: 'org.apache.flink', name: 'flink-runtime_2.11', version:'1.0-SNAPSHOT') {
        exclude module: 'slf4j-log4j12'
    }

    // Spring
    compile( group:'org.springframework.boot', name: 'spring-boot-starter' )
    compile( group:'com.fasterxml.jackson.core', name: 'jackson-databind' )
    
}

springBoot {

    mainClass = 'org.opencorrelate.exercise.jvm.scala.SocketTextStreamWordCount'    
}


test {
    beforeTest { descriptor ->
        logger.lifecycle('Running test: ${descriptor}')
    }
}

bootRun {
    if ( project.hasProperty('args') ) {
        args project.args.split('\\s+')
    }
}